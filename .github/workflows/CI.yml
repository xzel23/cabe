name: CI
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read
  id-token: write
  pages: write

env:
  INSTANCE: 'Writerside/cabe'
  DOCKER_VERSION: '243.21565'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Setup JDK 17 for build
      - name: 'Set up JDK 17'
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      # Extract Gradle version from wrapper properties for cache key
      - name: 'Extract Gradle Version'
        id: gradle-version
        run: |
          GRADLE_VERSION=$(sed -n -e 's!.*gradle-!!' -e 's!-bin.zip!!p' < gradle/wrapper/gradle-wrapper.properties)
          echo "Detected Gradle version: $GRADLE_VERSION"
          echo "gradle_version=$GRADLE_VERSION" >> "$GITHUB_OUTPUT"
          # Create a file with the Gradle version for other jobs to use
          mkdir -p build/gradle-version
          echo "$GRADLE_VERSION" > build/gradle-version/version.txt

      - name: 'Setup Gradle'
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-version: ${{ steps.gradle-version.outputs.gradle_version }}
          gradle-home-cache-includes: |
            caches
            notifications
            jdks
            wrapper
            toolchains

      - name: 'Execute Gradle build'
        run: gradle --no-daemon --build-cache build test publishToMavenLocal publishToStagingDirectory
        id: compile

      # run a first build and test and then a second build and then a clean after successful execution
      # to check files are not locked after executing the gradle task (weird? this is actually a regression test)
      - name: 'Run plugin tests'
        run: gradle --no-daemon --build-cache -Dtest |
          cabe-gradle-plugin-test:clean|
          cabe-gradle-plugin-test:test-gradle-plugin:run
          cabe-gradle-plugin-test:test-gradle-plugin-modular:run 
          && ./gradlew --no-daemon -Dtest cabe-gradle-plugin-test:build
          && ./gradlew --no-daemon -Dtest cabe-gradle-plugin-test:clean
          && echo "plugin test successful"
        id: testplugin

      - name: 'Create shadow jar for the cabe processor'
        run: gradlew cabe-processor:shadowJar
        id: createshadowjar

      - name: 'Compile examples'
        run: gradlew --no-daemon -Dexamples examples:hello:build examples:hellofx:build
        id: compileexamples

  build-docs:
    needs: build
    runs-on: ubuntu-latest
    outputs:
      algolia_artifact: ${{ steps.define-ids.outputs.algolia_artifact }}
      artifact: ${{ steps.define-ids.outputs.artifact }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Define instance id and artifacts
        id: define-ids
        run: |
          INSTANCE=${INSTANCE#*/}
          INSTANCE_ID_UPPER=$(echo "$INSTANCE" | tr '[:lower:]' '[:upper:]')
          ARTIFACT="webHelp${INSTANCE_ID_UPPER}2-all.zip"
          ALGOLIA_ARTIFACT="algolia-indexes-${INSTANCE_ID_UPPER}.zip"

          # Print the values
          echo "INSTANCE_ID_UPPER: $INSTANCE_ID_UPPER"
          echo "ARTIFACT: $ARTIFACT"
          echo "ALGOLIA_ARTIFACT: $ALGOLIA_ARTIFACT"

          # Set the environment variables and outputs
          echo "INSTANCE_ID_UPPER=$INSTANCE_ID_UPPER" >> $GITHUB_ENV
          echo "ARTIFACT=$ARTIFACT" >> $GITHUB_ENV
          echo "ALGOLIA_ARTIFACT=$ALGOLIA_ARTIFACT" >> $GITHUB_ENV
          echo "artifact=$ARTIFACT" >> $GITHUB_OUTPUT
          echo "algolia_artifact=$ALGOLIA_ARTIFACT" >> $GITHUB_OUTPUT

      - name: Build docs using Writerside Docker builder
        uses: JetBrains/writerside-github-action@v4
        with:
          instance: ${{ env.INSTANCE }}
          artifact: ${{ env.ARTIFACT }}
          docker-version: ${{ env.DOCKER_VERSION }}

      - name: Save artifact with build results
        uses: actions/upload-artifact@v4
        with:
          name: docs
          path: |
            artifacts/${{ env.ARTIFACT }}
            artifacts/report.json
            artifacts/${{ env.ALGOLIA_ARTIFACT }}
          retention-days: 7

  test-docs:
    needs: build-docs
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: docs
          path: artifacts

      - name: Test documentation
        uses: JetBrains/writerside-checker-action@v1
        with:
          instance: ${{ env.INSTANCE }}

  deploy-docs:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    needs: [build-docs, test-docs]
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: docs
          path: artifacts

      - name: Unzip artifact
        run: unzip -O UTF-8 -qq "artifacts/${{ needs.build-docs.outputs.artifact }}" -d dir

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Package and upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: dir

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
